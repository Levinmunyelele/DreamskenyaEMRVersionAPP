import { ProviderService } from './../services/provider.service';
import { EncounterService } from '../services/encounter.service';
import { Component, OnInit } from '@angular/core';
import { FormBuilder, FormGroup, FormArray, Validators } from '@angular/forms';
import { LocationService } from '../services/location.service';
import { ActivatedRoute, Router } from '@angular/router';
import { HttpClient } from '@angular/common/http';
import { AlertController } from '@ionic/angular';
import { DatePipe } from '@angular/common';
import { VisitService } from '../services/visit.service';

interface Question {
  label: string;
  concept: string;
  type: string;
  options?: { value: string; label: string; }[];
  dependsOn?: string;
  showIf?: string[];
}



@Component({
  selector: 'app-vulnerability-screening',
  templateUrl: './vulnerability-screening.page.html',
  styleUrls: ['./vulnerability-screening.page.scss'],
})
export class VulnerabilityScreeningPage implements OnInit {

  screeningForm!: FormGroup;
  patientUuid!: string;
  encounterType = 'd69dedbd-3933-4e44-8292-bea939ce980a';
  visit = 'd69dedbd-3933-4e44-8292-bea939ce980a';
  form = 'd69dedbd-3933-4e44-8292-bea939ce980a';
  orders = [];
  id!: string;
  name!: string;
  avatar!: string;
  eligiblePatients: any[] = [];
  ineligiblePatients: any[] = [];



  questions = [

    {
      label: "Ever Enrolled in Dreams?",
      concept: "308dda4f-9b37-4ffa-9905-2ede5001193e",
      type: 'dropdown',
      options: [
        { value: '1066AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA', label: 'No' },
        { value: '1065AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA', label: 'Yes' }
      ]
    },
    {
      label: 'DREAMS ID',
      concept: 'f4d8d84a-bef7-45ed-92ff-c38a90dc38d5',
      type: 'text',
      hide: true
    },
    {
      label: 'Marital Status',
      concept: 'b71619d4-6f61-41f7-a04e-aa0bb6db09be',
      type: 'dropdown',
      options: [
        { value: '1057AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA', label: 'Never Married' },
        { value: '5555AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA', label: 'Married' },
        { value: '1058AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA', label: 'Divorced' },
        { value: '1059AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA', label: 'Widowed' }
      ]
    },
    {
      label: 'Who do you frequently live with?',
      concept: 'c3224907-5015-492f-8081-449900c10b50',
      type: 'dropdown',
      options: [
        { value: '167240AAAAAAAAAAAAAAAAAAAAAAAAAAAAAA', label: 'Live with friends' },
        { value: '167238AAAAAAAAAAAAAAAAAAAAAAAAAAAAAA', label: 'Live with parents' },
        { value: '167239AAAAAAAAAAAAAAAAAAAAAAAAAAAAAA', label: 'Live with siblings' }
      ]
    },
    {
      label: "Do you have any form of disability?:",
      concept: "91a87033-8f75-4f08-9f15-0d8ae66bd9d9",
      type: 'dropdown',
      options: [
        { value: '1066AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA', label: 'No' },
        { value: '1065AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA', label: 'Yes' }
      ],

    },
    {
      label: "State disability type?:",
      concept: "9ff25d8a-f30b-405d-90ec-5025667a3255",
      type: 'dropdown',
      hide: true,
      options: [
        { value: '117698AAAAAAAAAAAAAAAAAAAAAAAAAAAAAA', label: 'Hearing Loss' },
        { value: '167200AAAAAAAAAAAAAAAAAAAAAAAAAAAAAA', label: 'Impaired speech' },
        { value: '110104AAAAAAAAAAAAAAAAAAAAAAAAAAAAAA', label: 'Mental Disability' },
        { value: '159298AAAAAAAAAAAAAAAAAAAAAAAAAAAAAA', label: 'Visual impairment' }

      ],

    },
    {
      label: "Caregiver First Name:",
      concept: "dfc0b5b2-dd11-40cd-b1ca-6ea36dc65269",
      type: "text",
    },
    {
      label: "Caregiver Middle Name:",
      concept: "9e799991-e935-4bc7-b310-26dd5fe5ed32",
      type: "text",
    },
    {
      label: "Caregiver SurName",
      concept: "c147a304-d81c-487a-93c1-bdaff261beb6",
      type: "text",
    },
    {
      label: " Caregiver Occupation:",
      concept: "49d6d2d8-9663-4613-9a18-c31f154480df",
      type: "text",
    },

    {
      label: 'Out of School',
      concept: '2eaad8ca-decf-4731-97fe-16d23b548e09',
      type: 'radio',
      options: [
        { value: '1066AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA', label: 'No' },
        { value: '1065AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA', label: 'Yes' }
      ]
    },
    {
      label: "Ever Had Sex",
      concept: "9231c367-cb08-4634-8fbd-98f6cfc322d6",
      type: "dropdown",
      options: [
        { value: "1065AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA", label: "Yes" },
        { value: "1066AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA", label: "No" }
      ]
    },
    {
      label: "Has had more than one sexual partner in the last 12 months?",
      concept: "040a11a6-eaf3-478e-a274-4cf2352675ae",
      type: "radio",
      options: [
        { value: "1065AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA", label: "Yes" },
        { value: "1066AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA", label: "No" }
      ],
      dependsOn: "9231c367-cb08-4634-8fbd-98f6cfc322d6",
      showIf: ["1065AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA"]
    },
    {
      label: "Has ever received money gifts or favors in exchange for sex?",
      concept: "675fbd8b-37d9-4885-8cb0-df2ab04dc739",
      type: "radio",
      options: [
        { value: "1065AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA", label: "Yes" },
        { value: "1066AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA", label: "No" }
      ],
      dependsOn: "9231c367-cb08-4634-8fbd-98f6cfc322d6",
      showIf: ["1065AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA"]
    },
    {
      label: "Have been diagnosed or treated for STI?",
      concept: "b269f2dd-7810-418f-8ad9-8a847e95e83c",
      type: "radio",
      options: [
        { value: "1065AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA", label: "Yes" },
        { value: "1066AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA", label: "No" }
      ],
      dependsOn: "9231c367-cb08-4634-8fbd-98f6cfc322d6",
      showIf: ["1065AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA"]
    },
    {
      label: "Has a child of her own/is pregnant/has been pregnant?",
      concept: "7b652f92-9cbb-4b8a-bddc-4eeefd977ca6",
      type: "radio",
      options: [
        { value: "1065AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA", label: "Yes" },
        { value: "1066AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA", label: "No" }
      ],
      dependsOn: "9231c367-cb08-4634-8fbd-98f6cfc322d6",
      showIf: ["1065AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA"]
    },

    {
      label: 'Under going violence or has undergone violence in the last 12 Months? (Physical,Emotional,Sexual,Social economic Violence)',
      concept: 'b6c91b49-1be6-4d5e-868f-7d4001dd1943',
      type: 'radio',
      options: [
        { value: '1065AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA', label: 'Yes' },
        { value: '1066AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA', label: 'No' }
      ]
    },
    {
      label: 'Is the head of the household or in a child-headed household?',
      concept: 'd2b04d79-7922-4cc8-abcd-58bead1bf6fb',
      type: 'radio',
      options: [
        { value: '1065AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA', label: 'Yes' },
        { value: '1066AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA', label: 'No' }
      ]
    },
    {
      label: "Has used alcohol/drugs or abuse or struggled with addiction in the last 12 months?:",
      concept: "ae715255-d4d7-421b-b434-407e3c9b4bd2",
      type: 'radio',
      options: [
        { value: '1065AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA', label: 'Yes' },
        { value: '1066AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA', label: 'No' }
      ]
    },
    {
      label: "Is an orphan (partial or Total):  ",
      concept: "58b12a1f-23fa-4b48-bea1-bcbe3b8ea20b",
      type: 'radio',
      options: [
        { value: '1065AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA', label: 'Yes' },
        { value: '1066AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA', label: 'No' }
      ]
    },
    {
      label: "Comment",
      concept: "6af3d746-e9c4-43ce-9d23-ae5c88e0c620",
      type: 'textarea',

    },
    {
      label: "Is eligible?",
      concept: "ccf759b9-bdd4-4265-a71a-67a894d89dec",
      type: 'dropdown',
      options: [
        { value: '1065AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA', label: 'Yes' },
        { value: '1066AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA', label: 'No' }
      ]
    },

  ];
  minYear: string;
  maxYear: string;
  locations: any[] = [];
  selectedLocationUuid: string = '';
  providers: any[] = [];
  selectedProviderUuid: string = '';
  startDatetime: string = '';
  stopDatetime: string = '';
  encounterDatetime: string = '';
  selectedLocationName: string = 'Unknown Location';
  encounterDate: string = '';
  encounterTime: string = '';
  visitType: any;

  constructor(
    private fb: FormBuilder,
    private encounterService: EncounterService,
    private http: HttpClient,
    private router: Router,
    private visitService: VisitService,
    private alertController: AlertController,
    private route: ActivatedRoute,
    private locationService: LocationService,
    private providerService: ProviderService) {
    const currentYear = new Date().getFullYear();
    this.minYear = `${currentYear - 100}-01-01`;
    this.maxYear = `${currentYear}-12-31`;
  }

  ngOnInit() {
    this.loadLocations();
    this.loadProviders();

    this.route.params.subscribe((params) => {
      this.patientUuid = params['patientUuid'];
      this.id = params['idPart'];
      this.name = decodeURIComponent(params['cleanName']);
      this.avatar = this.getInitials(this.name);
    });

    this.route.queryParams.subscribe((queryParams) => {
      console.log('Query Params:', queryParams);

      const encounterDatetime = queryParams['date']
        ? new Date(queryParams['date']).toISOString().substring(0, 10)
        : '';

      const selectedLocationUuid = queryParams['location'] || '';
      const visitType = queryParams['visitType'] || '';

      this.screeningForm = this.fb.group({
        encounterDatetime: [encounterDatetime, Validators.required],
        selectedLocationUuid: [selectedLocationUuid, Validators.required],
        selectedProviderUuid: ['', Validators.required],
        visitType: [visitType, Validators.required],
        responses: this.fb.array(
          this.questions.map((question) =>
            this.fb.control(
              '',
              question.concept === 'ccf759b9-bdd4-4265-a71a-67a894d89dec' ? Validators.required : []
            )
          )
        )
      });


      console.log('Form initialized with:', this.screeningForm.value);

      this.screeningForm.patchValue({
        encounterDatetime,
        selectedLocationUuid,
        visitType
      });

      this.setupValueChangeListeners();
    });
  }
  async screenPatient(patientUuid: string, screeningData: any, isEligible: boolean) {
    const alreadyScreened = await this.encounterService.isPatientScreened(patientUuid);

    if (alreadyScreened) {
      this.showAlert('Error', 'This patient has already been screened.');
      return;
    }

    this.encounterService.submitEncounter(screeningData).subscribe(async (response) => {
      console.log('Screening submitted:', response);

      await this.encounterService.saveScreenedPatient(this.id, this.name, isEligible);

      this.showAlert('Success', 'Screening data submitted successfully.');
    }, error => {
      console.error('Error submitting screening:', error);
      this.showAlert('Error', 'Failed to submit screening data.');
    });
  }


  async showAlert(header: string, message: string) {
    const alert = await this.alertController.create({
      header,
      message,
      buttons: ['OK']
    });
    await alert.present();
  }

  private setupValueChangeListeners() {
    const responses = this.screeningForm.get('responses') as FormArray;

    responses.at(0)?.valueChanges.subscribe((value: string) => {
      this.toggleDreamsIdQuestion(value);
    });

    responses.at(4)?.valueChanges.subscribe((value: string) => {
      this.toggleStateDisabilityTypeQuestion(value);
    });

   
  }

  mapLocationName(locationUuid: string) {
    console.log('Mapping Location UUID:', locationUuid);

    if (!this.locations || this.locations.length === 0) {
      console.warn('Locations not yet loaded, retrying...');
      setTimeout(() => this.mapLocationName(locationUuid), 500);
      return;
    }

    const foundLocation = this.locations.find(loc => loc.uuid === locationUuid);

    if (foundLocation) {
      console.log('Mapped Location:', foundLocation.display);
      this.selectedLocationName = foundLocation.display;
    } else {
      console.log('Location not found for UUID:', locationUuid);
      this.selectedLocationName = 'Unknown Location';
    }
  }
  shouldShowQuestion(question: Question) {
    if (!question.dependsOn) {
      return true; // Show if no dependency
    }

    const dependentQuestion = this.questions.find((q) => q.concept === question.dependsOn);
    if (!dependentQuestion) {
      return true; // Show if dependent question not found
    }

    const dependentValue = this.responses.controls[this.questions.indexOf(dependentQuestion)].value;
    return question.showIf?.includes(dependentValue);
  }
  loadLocations(): void {
    this.locationService.getLocations().subscribe(
      (response) => {
        this.locations = response.results;

        this.route.queryParams.subscribe((queryParams) => {
          if (queryParams['location']) {
            this.mapLocationName(queryParams['location']);
          }
        });
      },
      (error) => {
        console.error('Error fetching locations', error);
      }
    );
  }

  loadProviders(): void {
    this.providerService.getProviders().subscribe(
      (response) => {
        this.providers = response.results;
      },
      (error) => {
        console.error('Error fetching providers:', error);
      }
    );
  }

  onProviderChange(): void {
    this.selectedProviderUuid = this.providers.map(provider => provider.uuid).find(uuid => uuid === this.screeningForm.value.selectedProviderUuid);
  }
  toggleDreamsIdQuestion(value: string) {
    const dreamsIdQuestion = this.questions.find(q => q.concept === 'f4d8d84a-bef7-45ed-92ff-c38a90dc38d5');

    if (value === '1065AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA') {
      dreamsIdQuestion!.hide = false;
    } else {
      dreamsIdQuestion!.hide = true;
    }
  }
  toggleStateDisabilityTypeQuestion(value: string) {
    const stateDisabilityTypeQuestion = this.questions.find(q => q.concept === '9ff25d8a-f30b-405d-90ec-5025667a3255');

    if (value === '1065AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA') {
      stateDisabilityTypeQuestion!.hide = false;
    } else {
      stateDisabilityTypeQuestion!.hide = true;
    }
  }
  

  get responses(): FormArray {
    return this.screeningForm.get('responses') as FormArray;
  }


  getInitials(name: string): string {
    const nameParts = name.split(' ');
    const firstInitial = nameParts[0]?.charAt(0).toUpperCase();
    const middleInitial = nameParts.length > 2 ? nameParts[1]?.charAt(0).toUpperCase() : '';
    const lastInitial = nameParts[nameParts.length - 1]?.charAt(0).toUpperCase();

    return middleInitial ? firstInitial + middleInitial + lastInitial : firstInitial + lastInitial;
  }

  isEligibilityFilled(): boolean {
    const responsesArray = this.screeningForm.get('responses') as FormArray;
    if (!responsesArray || responsesArray.length === 0) return false;

    const lastResponse = responsesArray.at(responsesArray.length - 1).value;
    return !!lastResponse;
  }

  async submitForm() {
    const formValue = this.screeningForm.value;

    const encounterDatetime = formValue.encounterDatetime
      ? `${formValue.encounterDatetime}T${this.encounterTime || '00:00:00'}Z`
      : '';

    const locationUuid = formValue.selectedLocationUuid || 'Unknown';
    const providerUuid = formValue.selectedProviderUuid || 'Unknown';
    const visitType = formValue.visitType || 'default-visit-type';

    const obs = this.questions
      .map((question, index) => {
        const value = (this.screeningForm.get('responses') as FormArray).at(index).value;
        if (value !== null && value !== undefined && value !== '') {
          if (['dropdown', 'radio'].includes(question.type)) {
            return { concept: question.concept, valueCoded: value };
          }
          if (['text', 'textarea'].includes(question.type)) {
            return { concept: question.concept, valueText: value };
          }
          if (question.type === 'date') {
            return { concept: question.concept, valueDate: value };
          }
          return { concept: question.concept, value };
        }
        return null;
      })
      .filter(item => item !== null);

    const payload = {
      encounterDatetime,
      patient: this.patientUuid,
      encounterType: this.encounterType || undefined,
      location: locationUuid,
      encounterProviders: [
        {
          provider: providerUuid,
          encounterRole: '240b26f9-dd88-4172-823d-4a8bfeb7841f'
        }
      ],
      visit: {
        patient: this.patientUuid,
        visitType,
        startDatetime: encounterDatetime
      },
      obs
    };

    console.log('Submitting form with payload:', payload);

    this.encounterService.submitEncounter(payload).subscribe(
      async response => {
        console.log('Encounter submitted successfully:', response);

        const eligibilityObs = obs.find(o => o.concept === 'ccf759b9-bdd4-4265-a71a-67a894d89dec');
        const eligibilityResponse = eligibilityObs?.valueCoded || '';

        console.log('Eligibility Response UUID:', eligibilityResponse);

        if (eligibilityResponse === '1065AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA') {
          // Eligible: Do NOT checkout, go straight to enrollment
          await this.encounterService.saveScreenedPatient(this.id, this.name, true);
          console.log(`Stored in Ionic Storage: Name: ${this.name}, ID: ${this.id}, Eligible: true`);

          const alert = await this.alertController.create({
            header: 'Eligibility Confirmation',
            message: 'The girl is eligible',
            buttons: [
              {
                text: 'Cancel',
                role: 'cancel',
                handler: () => {
                  this.router.navigate(['/home']);
                }
              },
              {
                text: 'Enroll',
                handler: () => {
                  this.router.navigate(['/enrollment'], {
                    queryParams: {
                      patientUuid: this.patientUuid,
                      locationUuid: locationUuid,
                      visitType: visitType,
                      patientName: encodeURIComponent(this.name)
                    }
                  });
                }
              }
            ]
          });

          await alert.present();
        } else if (eligibilityResponse === '1066AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA') {
          // Not Eligible: Checkout before exiting
          await this.encounterService.saveScreenedPatient(this.id, this.name, false);
          console.log(`Stored in Ionic Storage: Name: ${this.name}, ID: ${this.id}, Eligible: false`);

          const notEligibleAlert = await this.alertController.create({
            header: 'Not Eligible',
            message: 'The girl is not eligible. Do you want to check out the visit before exiting?',
            buttons: [
              {
                text: 'No, Exit',
                role: 'cancel',
                handler: () => {
                  this.router.navigate(['/home']);
                }
              },
              {
                text: 'Yes, Checkout',
                handler: async () => {
                  console.log('Checking out visit...');
                  this.visitService.checkoutVisit(locationUuid, visitType).subscribe({
                    next: async () => {
                      console.log('Visit successfully checked out.');
                      const exitAlert = await this.alertController.create({
                        header: 'Checkout Complete',
                        message: 'The visit has been checked out. Returning to home.',
                        buttons: [{
                          text: 'OK',
                          handler: () => {
                            this.router.navigate(['/home']);
                          }
                        }]
                      });
                      await exitAlert.present();
                    },
                    error: (error) => {
                      console.error('Error checking out visit:', error);
                      this.router.navigate(['/home']);
                    }
                  });
                }
              }
            ]
          });

          await notEligibleAlert.present();
        } else {
          const alert = await this.alertController.create({
            header: 'Missing Data',
            message: 'Eligibility response is missing. Please check the form.',
            buttons: ['OK']
          });

          await alert.present();
        }
      },
      error => {
        console.error('Error submitting encounter:', error);
      }
    );
  }   
} 