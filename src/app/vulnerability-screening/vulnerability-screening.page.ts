import { ProviderService } from './../services/provider.service';
import { EncounterService } from '../services/encounter.service';
import { Component, OnInit } from '@angular/core';
import { FormBuilder, FormGroup, FormArray, Validators } from '@angular/forms';
import { LocationService } from '../services/location.service';
import { Router } from '@angular/router';
import { HttpClient } from '@angular/common/http';

@Component({
  selector: 'app-vulnerability-screening',
  templateUrl: './vulnerability-screening.page.html',
  styleUrls: ['./vulnerability-screening.page.scss'],
})
export class VulnerabilityScreeningPage implements OnInit {

  screeningForm!: FormGroup;
  patient = { uuid: '546ce21a-1274-425e-abb0-45a1bd83d757' };
  encounterType = 'd69dedbd-3933-4e44-8292-bea939ce980a';
  visit = 'd69dedbd-3933-4e44-8292-bea939ce980a';
  form = 'd69dedbd-3933-4e44-8292-bea939ce980a';
  orders = [];





  questions = [

    {
      label: "Ever Enrolled in Dreams?",
      concept: "308dda4f-9b37-4ffa-9905-2ede5001193e",
      type: 'dropdown',
      options: [
        { value: '1066AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA', label: 'No' },
        { value: '1065AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA', label: 'Yes' }
      ]
    },
    {
      label: 'DREAMS ID',
      concept: 'f4d8d84a-bef7-45ed-92ff-c38a90dc38d5',
      type: 'text',
      hide: true
    },
    {
      label: 'Marital Status',
      concept: 'b71619d4-6f61-41f7-a04e-aa0bb6db09be',
      type: 'dropdown',
      options: [
        { value: '1057AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA', label: 'Never Married' },
        { value: '5555AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA', label: 'Married' },
        { value: '1058AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA', label: 'Divorced' },
        { value: '1059AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA', label: 'Widowed' }
      ]
    },
    {
      label: 'Who do you frequently live with?',
      concept: 'c3224907-5015-492f-8081-449900c10b50',
      type: 'dropdown',
      options: [
        { value: '167240AAAAAAAAAAAAAAAAAAAAAAAAAAAAAA', label: 'Live with friends' },
        { value: '167238AAAAAAAAAAAAAAAAAAAAAAAAAAAAAA', label: 'Live with parents' },
        { value: '167239AAAAAAAAAAAAAAAAAAAAAAAAAAAAAA', label: 'Live with siblings' }
      ]
    },
    {
      label: "Do you have any form of disability?:",
      concept: "91a87033-8f75-4f08-9f15-0d8ae66bd9d9",
      type: 'dropdown',
      options: [
        { value: '1066AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA', label: 'No' },
        { value: '1065AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA', label: 'Yes' }
      ],

    },
    {
      label: "State disability type?:",
      concept: "9ff25d8a-f30b-405d-90ec-5025667a3255",
      type: 'dropdown',
      hide: true,
      options: [
        { value: '117698AAAAAAAAAAAAAAAAAAAAAAAAAAAAAA', label: 'Hearing Loss' },
        { value: '167200AAAAAAAAAAAAAAAAAAAAAAAAAAAAAA', label: 'Impaired speech' },
        { value: '110104AAAAAAAAAAAAAAAAAAAAAAAAAAAAAA', label: 'Mental Disability' },
        { value: '159298AAAAAAAAAAAAAAAAAAAAAAAAAAAAAA', label: 'Visual impairment' }

      ],

    },
    {
      label: "Caregiver First Name:",
      concept: "dfc0b5b2-dd11-40cd-b1ca-6ea36dc65269",
      type: "text",
    },
    {
      label: "Caregiver Middle Name:",
      concept: "9e799991-e935-4bc7-b310-26dd5fe5ed32",
      type: "text",
    },
    {
      label: "Caregiver SurName",
      concept: "c147a304-d81c-487a-93c1-bdaff261beb6",
      type: "text",
    },
    {
      label: " Caregiver Occupation:",
      concept: "49d6d2d8-9663-4613-9a18-c31f154480df",
      type: "text",
    },

    {
      label: 'Out of School',
      concept: '2eaad8ca-decf-4731-97fe-16d23b548e09',
      type: 'radio',
      options: [
        { value: '1066AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA', label: 'No' },
        { value: '1065AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA', label: 'Yes' }
      ]
    },
    {
      label: 'Ever Had Sex',
      concept: '9231c367-cb08-4634-8fbd-98f6cfc322d6',
      type: 'dropdown',
      options: [
        { value: '1065AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA', label: 'Yes' },
        { value: '1066AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA', label: 'No' }
      ],
    },
    {
      label: 'Has had more than one sexual partner in the last 12 months?',
      concept: '040a11a6-eaf3-478e-a274-4cf2352675ae',
      type: 'radio',
      options: [
        { value: '1065AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA', label: 'Yes' },
        { value: '1066AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA', label: 'No' }
      ],
      hide: true,
      followUpFor: '9231c367-cb08-4634-8fbd-98f6cfc322d6'
    },
    {
      label: 'Has ever received money gifts or favors in exchange for sex?',
      concept: '675fbd8b-37d9-4885-8cb0-df2ab04dc739',
      type: 'radio',
      options: [
        { value: '1065AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA', label: 'Yes' },
        { value: '1066AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA', label: 'No' }
      ],
      hide: true,
      followUpFor: '9231c367-cb08-4634-8fbd-98f6cfc322d6'
    },
    {
      label: 'Have been diagnosed or treated for STI?',
      concept: 'b269f2dd-7810-418f-8ad9-8a847e95e83c',
      type: 'radio',
      options: [
        { value: '1065AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA', label: 'Yes' },
        { value: '1066AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA', label: 'No' }
      ],
      hide: true,
      followUpFor: '9231c367-cb08-4634-8fbd-98f6cfc322d6'
    },
    {
      label: 'Has a child of her own/is pregnant/has been pregnant?',
      concept: '7b652f92-9cbb-4b8a-bddc-4eeefd977ca6',
      type: 'radio',
      options: [
        { value: '1065AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA', label: 'Yes' },
        { value: '1066AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA', label: 'No' }
      ],
      hide: true,
      followUpFor: '9231c367-cb08-4634-8fbd-98f6cfc322d6'
    },

    {
      label: 'Under going violence or has undergone violence in the last 12 Months? (Physical,Emotional,Sexual,Social economic Violence)',
      concept: 'b6c91b49-1be6-4d5e-868f-7d4001dd1943',
      type: 'radio',
      options: [
        { value: '1065AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA', label: 'Yes' },
        { value: '1066AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA', label: 'No' }
      ]
    },
    {
      label: 'Is the head of the household or in a child-headed household?',
      concept: 'd2b04d79-7922-4cc8-abcd-58bead1bf6fb',
      type: 'radio',
      options: [
        { value: '1065AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA', label: 'Yes' },
        { value: '1066AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA', label: 'No' }
      ]
    },
    {
      label: "Has used alcohol/drugs or abuse or struggled with addiction in the last 12 months?:",
      concept: "ae715255-d4d7-421b-b434-407e3c9b4bd2",
      type: 'radio',
      options: [
        { value: '1065AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA', label: 'Yes' },
        { value: '1066AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA', label: 'No' }
      ]
    },
    {
      label: "Is an orphan (partial or Total):  ",
      concept: "58b12a1f-23fa-4b48-bea1-bcbe3b8ea20b",
      type: 'radio',
      options: [
        { value: '1065AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA', label: 'Yes' },
        { value: '1066AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA', label: 'No' }
      ]
    },
    {
      label: "Comment",
      concept: "6af3d746-e9c4-43ce-9d23-ae5c88e0c620",
      type: 'textarea',

    },
    {
      label: "Is eligible?",
      concept: "ccf759b9-bdd4-4265-a71a-67a894d89dec",
      type: 'dropdown',
      options: [
        { value: '1065AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA', label: 'Yes' },
        { value: '1066AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA', label: 'No' }
      ]
    },

  ];
  minYear: string;
  maxYear: string;
  locations: any[] = [];
  selectedLocationUuid: string = '';
  providers: any[] = [];
  selectedProviderUuid: string = '';
  startDatetime: string = '';
  stopDatetime: string = '';
  encounterDatetime: string= '';

  constructor(
    private fb: FormBuilder,
    private encounterService: EncounterService,
    private http: HttpClient,
    private router: Router,
    private locationService: LocationService,
    private providerService: ProviderService) {
    const currentYear = new Date().getFullYear();
    this.minYear = `${currentYear - 100}-01-01`;
    this.maxYear = `${currentYear}-12-31`;
  }

  ngOnInit() {
    this.loadLocations();
    this.setDates();  
    this.loadProviders();
    this.screeningForm = this.fb.group({
      encounterDatetime: [''],
      selectedLocationUuid: ['', Validators.required],
      selectedProviderUuid: ['', Validators.required],
      responses: this.fb.array(this.questions.map(() => this.fb.control('')))
    });

    const dreamsEnrolledControl = (this.screeningForm.get('responses') as FormArray)?.at(0);

    dreamsEnrolledControl?.valueChanges.subscribe((value: string) => {
      this.toggleDreamsIdQuestion(value);
    });

    const stateOfDisabilityControl = (this.screeningForm.get('responses') as FormArray)?.at(4);

    stateOfDisabilityControl?.valueChanges.subscribe((value: string) => {
      this.toggleStateDisabilityTypeQuestion(value);
    });
    const everHadSexControl = (this.screeningForm.get('responses') as FormArray)?.at(11);
    if (everHadSexControl) {
      everHadSexControl?.valueChanges.subscribe((value: string) => {
        this.toggleFollowUpQuestions(value);
      });
    }
  }

  onSelectChange(event: any) {
    this.toggleFollowUpQuestions(event.target.value);
  }

  setDates() {
    const now = new Date();
    const start = new Date();
    start.setFullYear(now.getFullYear() - 1); 
    start.setHours(9, 0, 0);

    const stop = new Date(start);
    stop.setHours(start.getHours() + 1); 

    this.startDatetime = start.toISOString();
    this.stopDatetime = stop.toISOString();
    this.encounterDatetime = this.startDatetime;
}

  loadLocations(): void {
    this.locationService.getLocations().subscribe(
      (response) => {
        this.locations = response.results;
      },
      (error) => {
        console.error('Error fetching locations', error);
      }
    );
  }

  onLocationChange(): void {
    this.selectedLocationUuid = this.locations.map(location => location.uuid).find(uuid => uuid === this.screeningForm.value.selectedLocationUuid);
  }

  loadProviders(): void {
    this.providerService.getProviders().subscribe(
      (response) => {
        this.providers = response.results;
      },
      (error) => {
        console.error('Error fetching providers:', error);
      }
    );
  }
  onProviderChange(): void {
    this.selectedProviderUuid = this.providers.map(provider => provider.uuid).find(uuid => uuid === this.screeningForm.value.selectedProviderUuid);
  }
  toggleDreamsIdQuestion(value: string) {
    const dreamsIdQuestion = this.questions.find(q => q.concept === 'f4d8d84a-bef7-45ed-92ff-c38a90dc38d5');

    if (value === '1065AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA') {
      dreamsIdQuestion!.hide = false;
    } else {
      dreamsIdQuestion!.hide = true;
    }
  }
  toggleStateDisabilityTypeQuestion(value: string) {
    const stateDisabilityTypeQuestion = this.questions.find(q => q.concept === '9ff25d8a-f30b-405d-90ec-5025667a3255');

    if (value === '1065AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA') {
      stateDisabilityTypeQuestion!.hide = false;
    } else {
      stateDisabilityTypeQuestion!.hide = true;
    }
  }
  toggleFollowUpQuestions(value: string) {
    console.log('Toggling Follow-Up Questions for value:', value);

    const dependentQuestions = this.questions.filter(
      q => q.followUpFor === '9231c367-cb08-4634-8fbd-98f6cfc322d6'
    );

    console.log('Dependent Questions:', dependentQuestions);
    dependentQuestions.forEach(question => {
      question.hide = value !== '1065AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA';
    });

    this.questions = [...this.questions];
  }


  get responses(): FormArray {
    return this.screeningForm.get('responses') as FormArray;
  }

  submitForm() {
    const formValue = this.screeningForm.value;
  
    const obs = this.questions.map((question, index) => {
      const value = this.responses.at(index).value;
  
      let obsItem = null;
  
      if (value !== null && value !== undefined) {
        if (question.type === 'dropdown' || question.type === 'radio') {
          if (value) {  
            obsItem = {
              concept: question.concept,
              valueCoded: value
            };
          }
        }
        if (question.type === 'text' || question.type === 'textarea') {
          if (value) {  
            obsItem = {
              concept: question.concept,
              valueText: value
            };
          }
        }
        if (question.type === 'date') {
          if (value) {  
            obsItem = {
              concept: question.concept,
              valueDate: { uuid: value }
            };
          }
        } else {
          if (value) { 
            obsItem = {
              concept: question.concept,
              value: value
            };
          }
        }
      }
  
      return obsItem; 
    }).filter(item => item !== null); 
  
  
    const orders = this.orders.map(order => {
      if (order !== null && order !== undefined) {
        return {
          concept: order,
          orderType: order,
          patient: this.patient.uuid,
          careSetting: order,
          dateActivated: formValue.dateActivated
        };
      }
      return null;
    }).filter(order => order !== null); 
  
    const payload = {
      encounterDatetime: this.encounterDatetime || undefined, 
      patient: this.patient.uuid,
      encounterType: this.encounterType || undefined,
      location: this.selectedLocationUuid || 'Unknown',
      encounterProviders: [
        {
          provider: this.selectedProviderUuid || 'Unknown',
          encounterRole: '240b26f9-dd88-4172-823d-4a8bfeb7841f'
        }
      ],
      visit: {
        patient: this.patient.uuid,
        visitType: '3371a4d4-f66f-4454-a86d-92c7b3da990c',
        startDatetime: this.startDatetime || undefined,
        stopDatetime: this.stopDatetime || undefined
      },
      obs,
      orders,
      form: this.form || undefined  
    };
  
    this.encounterService.submitEncounter(payload).subscribe(response => {
      console.log('Encounter submitted successfully', response);
    }, error => {
      console.error('Error submitting encounter', error);
    });
  }
  
}